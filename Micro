#!/usr/bin/env php
<?php
use micro\controllers\Autoloader;
use micro\cache\CacheManager;
include 'tools/Console.php';
include 'tools/Command.php';
include 'tools/utils/FileUtils.php';

class Micro {
	private static $version="1.0.6";
	private static $appName="#ubiquity devtools";
	private static $configOptions;
	private static $toolsConfig;
	private static $indexContent="\n\t\$this->loadView('index.html');\n";
	private static $mainViewTemplate="index.html";
	private static $activeDir;
	private static $tmpDir;
	private static $githubUrl="https://github.com/phpMv/ubiquity/archive/master.zip";
	private static $githubRepo="ubiquity-master";
	private static $checkProjectDir=".micro";
	private static $frameworkDir="micro";

	public static function downloadZip($url,$zipFile="tmp/tmp.zip"){
		$f = file_put_contents($zipFile, fopen($url, 'r'), LOCK_EX);
		if(FALSE === $f)
			die("Couldn't write to file.");
		else{
			echo $f." downloaded.\n";
		}
	}

	public static function createComposerFile(){
		$composer=json_encode(self::$toolsConfig["composer"]);
		echo "Composer file creation...\n";
		FileUtils::writeFile("composer.json", $composer);
	}

	public static function unzip($zipFile,$extractPath="."){
		$zip = new \ZipArchive();
		if (! $zip) {
			echo "<br>Could not make ZipArchive object.";
			exit;
		}
		if($zip->open($zipFile) !== TRUE){
			echo "Error :- Unable to open the Zip File";
		}
		$zip->extractTo($extractPath);
		$zip->close();
	}

	public static function replaceAll($array,$subject){
		array_walk($array, function(&$item){if(is_array($item)) $item=implode("\n", $item);});
		return str_replace(array_keys($array), array_values($array), $subject);
	}

	public static function openReplaceWrite($source,$destination,$keyAndValues){
		$str=FileUtils::openFile($source);
		$str=self::replaceAll($keyAndValues,$str);
		return FileUtils::writeFile($destination,$str);
	}

	private static function getOption($options,$option,$longOption,$default=NULL){
		if(array_key_exists($option, $options)){
			$option=$options[$option];
		}else if(array_key_exists($longOption, $options)){
			$option=$options[$longOption];
		}
		else if(isset($default)===true){
			$option=$default;
		}else
			$option="";
		return $option;
	}

	private static function downloadAndExtract(){
		echo "Downloading ubiquity.git from https://github.com/phpMv/...\n";
		self::$tmpDir=uniqid("tmp");
		FileUtils::safeMkdir(self::$tmpDir);
		self::downloadZip(self::$githubUrl,self::$tmpDir."/tmp.zip");
		echo "Files extraction...\n";
		self::unzip(self::$tmpDir."/tmp.zip",self::$tmpDir."/");
	}

	public static function create($projectName,$options,$force=false){
		self::$activeDir=dirname(__FILE__);
		self::$toolsConfig=include("tools/toolsConfig.php");
		$arguments=[
				["b","dbName",$projectName],
				["t","dbType","mysql"],
				["s","serverName","127.0.0.1"],
				["p","port","3306"],
				["u","user","root"],
				["w","password",""],
				["m","all-models",false],
				["q","phpmv",false],
				["a","admin",false],
		];
		if(!is_dir($projectName) || $force){
			if(!$force)
				FileUtils::safeMkdir($projectName);
			chdir($projectName);
			FileUtils::safeMkdir(self::$checkProjectDir);

			$tmpDir=self::downloadAndExtract();
			FileUtils::safeMkdir("app");
			FileUtils::safeMkdir("app/views/main");
			FileUtils::safeMkdir("app/controllers");
			FileUtils::safeMkdir("app/models");
			FileUtils::safeMkdir("app/config");
			define('ROOT', realpath('./app').DS);
			echo "Files copy...\n";
			FileUtils::xcopy($tmpDir."/".self::$githubRepo."/".self::$frameworkDir."/","app/".self::$frameworkDir);
			FileUtils::xcopy(self::$activeDir."/project-files/app/controllers/ControllerBase.php", "app/controllers/ControllerBase.php");


			echo "Config files creation...\n";
			self::openReplaceWrite(self::$activeDir."/project-files/.htaccess", getcwd()."/.htaccess", array("%rewriteBase%"=>$projectName));
			self::$configOptions=["%siteUrl%"=>"http://127.0.0.1/".$projectName."/"];
			self::$configOptions["%projectName%"]=$projectName;
			self::$configOptions["%injections%"]="";
			self::$configOptions["%cssFiles%"]=[];
			self::$configOptions["%jsFiles%"]=[];
			foreach ($arguments as $argument){
				self::$configOptions["%".$argument[1]."%"]=self::getOption($options,$argument[0], $argument[1],$argument[2]);
			}
			self::showConfigOptions();

			self::includePhpmv();

			self::openReplaceWrite(self::$activeDir."/project-files/templates/config.tpl", "app/config/config.php", self::$configOptions);
			FileUtils::xcopy(self::$activeDir."/project-files/templates/services.tpl", "app/config/services.php");
			FileUtils::xcopy(self::$activeDir."/project-files/index.php", "index.php");
			self::openReplaceWrite(self::$activeDir."/project-files/templates/vHeader.tpl", "app/views/main/vHeader.html", self::$configOptions);
			self::openReplaceWrite(self::$activeDir."/project-files/templates/vFooter.tpl", "app/views/main/vFooter.html", self::$configOptions);

			self::createComposerFile();
			$answer=Console::question("Do you want to run composer install ?",["y","n"]);
			if(Console::isYes($answer)){
				system("composer install");
				require_once ROOT.'./../vendor/autoload.php';
			}
			require_once 'app/'.self::$frameworkDir.'/controllers/Autoloader.php';
			$config=require_once 'app/config/config.php';
			Autoloader::register($config);
			micro\controllers\Startup::setConfig($config);

			self::createController($config,"Main",self::$indexContent);
			FileUtils::xcopy(self::$activeDir."/project-files/app/views/".self::$mainViewTemplate, "app/views/index.html");

			if(self::isBooleanTrue(self::$configOptions["%admin%"])){
				$this->adminInstall();
			}

			echo "deleting temporary files...\n";
			FileUtils::delTree($tmpDir);

			if(self::isBooleanTrue(self::$configOptions["%all-models%"]))
				micro\orm\creator\ModelsCreator::create($config);
			echo "project `{$projectName}` successfully created.\n";
		}else{
			echo "The {$projectName} folder already exists !\n";
			$answer=Console::question("Would you like to continue ?",["y","n"]);
			if(Console::isYes($answer)){
				self::create($projectName,$options,true);
			}else
				die();
		}
	}

	private static function adminInstall($config=null){
		if(self::hasSemantic($config)){
			FileUtils::xcopy(self::$activeDir."/project-files/app/views/Admin","app/views/Admin");
			FileUtils::xcopy(self::$activeDir."/project-files/app/controllers/Admin.php","app/controllers/Admin.php");
			echo "Creating the Controller Admin at the location app/controllers/Admin.php\n";
		}else{
			throw new Exception("UbiquityMyAdmin require phpmv=semantic option.");
		}
	}

	private static function hasSemantic($config=null){
		if(isset($config))
			return @self::$configOptions["%phpmv%"]==="semantic";
		else{
			if(isset($config["di"])){
				$di=$config["di"];
				if(isset($di["jquery"])){
					$jquery=$di["jquery"];
					if($jquery instanceof Ajax\php\micro\JsUtils){
						return $jquery->semantic()!==null;
					}else
						return false;
				}else
					return false;
			}else
				return false;
		}
	}

	private static function includePhpmv(){
		if(self::$configOptions["%phpmv%"]!==false){
			$phpmv=self::$configOptions["%phpmv%"];
			switch ($phpmv){
				case "bootstrap":case "semantic":
					self::$configOptions["%injections%"]="\"jquery\"=>function(){
					\t\t\$jquery=new Ajax\php\micro\JsUtils([\"defer\"=>true]);
					\t\t\$jquery->{$phpmv}(new Ajax\\".ucfirst($phpmv)."());
					\t\treturn \$jquery;
					\t}";
					break;
				default:
					throw new Exception($phpmv." is not a valid option for phpMv-UI.");
					break;
			}
			self::$toolsConfig["composer"]["require"]["phpmv/php-mv-ui"]="dev-master";
			if($phpmv==="bootstrap"){
				self::$configOptions["%cssFiles%"][]=self::includeCss(self::$toolsConfig["cdn"]["bootstrap"]["css"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["jquery"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["bootstrap"]["js"]);
				self::$mainViewTemplate="bootstrap.html";
			}
			elseif($phpmv==="semantic"){
				self::$configOptions["%cssFiles%"][]=self::includeCss(self::$toolsConfig["cdn"]["semantic"]["css"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["jquery"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["semantic"]["js"]);
				self::$indexContent='
		$semantic=$this->jquery->semantic();
		$semantic->htmlHeader("header",1,"Ubiquity framework");
		$bt=$semantic->htmlButton("btTest","Semantic-UI Button");
		$bt->onClick("$(\'#test\').html(\'It works with Semantic-UI too !\');");
		$this->jquery->compile($this->view);
		$this->loadView("index.html");';
				self::$mainViewTemplate="semantic.html";
			}
		}
	}

	private static function includeCss($filename){
		return "<link rel=\"stylesheet\" type=\"text/css\" href=\"{$filename}\">";
	}

	private static function includeJs($filename){
		return "<script src=\"{$filename}\"></script>";
	}

	private static function showConfigOptions(){
		$output = implode(', ', array_map(
		function ($v, $k) {if(is_array($v))
			$v=implode(",",$v );
			return sprintf("%s='%s'", str_ireplace("%", "", $k), $v); },
		self::$configOptions,
		array_keys(self::$configOptions)
		));
		echo "command line arguments :\n";
		echo $output."\n";
		if(self::isBooleanTrue(self::$configOptions["%admin%"]) && !self::hasSemantic()){
			throw new Exception("UbiquityMyAdmin require phpmv=semantic option.");
		}
		$phpmv=self::$configOptions["%phpmv%"];
		if($phpmv!==false){
			if($phpmv!=="bootstrap" && $phpmv!=="semantic"){
				throw new Exception($phpmv." is not a valid option for phpMv-UI.");
			}
		}
	}

	public static function createController($config,$controllerName,$indexContent=null,$force=false){
		$controllerName=ucfirst($controllerName);
		FileUtils::safeMkdir("app/controllers");
		$filename="app/controllers/{$controllerName}.php";
		if(file_exists($filename) && !$force){
			$answer=Console::question("The file {$filename} exists.\nWould you like to replace it?",["y","n"]);
			if(Console::isYes($answer))
				self::createController($config,$controllerName,$indexContent,true);
		}else{
			echo "Creating the Controller {$controllerName} at the location {$filename}\n";
			$namespace="";
			if(isset($config["mvcNS"]["controllers"]) && $config["mvcNS"]["controllers"]!=="")
				$namespace="namespace ".$config["mvcNS"]["controllers"].";";
			self::openReplaceWrite(self::$activeDir."/project-files/templates/controller.tpl", $filename, ["%controllerName%"=>$controllerName,"%indexContent%"=>$indexContent,"%namespace%"=>$namespace]);
		}
	}

	private static function setDir($dir=null){
		if(file_exists($dir) && is_dir($dir)){
			$microDir=$dir.DIRECTORY_SEPARATOR.self::$checkProjectDir;
			if(file_exists($microDir) && is_dir($microDir)){
				chdir($dir);
				echo "The project folder is ".FileUtils::cleanPathname($dir)."\n";
				return true;
			}
		}
		$newDir=dirname($dir);
		if($newDir===$dir)
			return false;
		else
			return self::setDir($newDir);
	}

	private static function parseArguments(){
		global $argv;
		array_shift($argv);
		$out = array();
		foreach($argv as $arg){
			if(substr($arg, 0, 2) == '--'){
				preg_match ("/\=|\:|\ /", $arg, $matches, PREG_OFFSET_CAPTURE);
				$eqPos=$matches[0][1];
				//$eqPos = strpos($arg, '=');
				if($eqPos === false){
					$key = substr($arg, 2);
					$out[$key] = isset($out[$key]) ? $out[$key] : true;
				}
				else{
					$key = substr($arg, 2, $eqPos - 2);
					$out[$key] = substr($arg, $eqPos + 1);
				}
			}
			else if(substr($arg, 0, 1) == '-'){
				if(substr($arg, 2, 1) == '='||substr($arg, 2, 1) == ':' || substr($arg, 2, 1) == ' '){
					$key = substr($arg, 1, 1);
					$out[$key] = substr($arg, 3);
				}
				else{
					$chars = str_split(substr($arg, 1));
					foreach($chars as $char){
						$key = $char;
						$out[$key] = isset($out[$key]) ? $out[$key] : true;
					}
				}
			}
			else{
				$out[] = $arg;
			}
		}
		return $out;
	}

	private static function selfUpdate(){
		$config=self::_init();
		$tmpDir=self::downloadAndExtract();

		define('ROOT', realpath('./app').DS);
		echo "Files copy...\n";
		FileUtils::xcopy($tmpDir."/ubiquity-master/".self::$frameworkDir."/","app/".self::$frameworkDir);

		$filename="app/controllers/Admin.php";
		if(file_exists($filename) && self::hasSemantic($config)){
			FileUtils::xcopy(self::$activeDir."/project-files/app/views/Admin","app/views/Admin");
		}
		echo "deleting temporary files...\n";
		FileUtils::delTree($tmpDir);
		$answer=Console::question("Do you want to run composer update ?",["y","n"]);
		if(Console::isYes($answer)){
			system("composer update");
		}
		echo "project in `".self::$activeDir."` successfully updated.\n";
	}

	public static function init($command){
		global $argv;
		register_shutdown_function(array("Micro","error"));
		$what=@$argv[2];
		$options=self::parseArguments();
		switch ($command) {
			case "project":case "create-project":case "new":
			self::create($what,$options);
			break;
			case "all-models":case "create-all-models":
				$config=self::_init();
				micro\orm\creator\ModelsCreator::create($config);
				break;
			case "model":case "create-model":
				$config=self::_init();
				micro\orm\creator\ModelsCreator::create($config,true,$what);
				break;
			case "controller":case "create-controller":
				$config=self::_init();
				self::createController($config,$what);
				break;
			case "clear-cache":
				$type=self::getOption($options, "t", "type","all");
				$config=self::_init();
				CacheManager::clearCache($config,$type);
				break;
			case "init-cache":
				$type=self::getOption($options, "t", "type","all");
				$config=self::_init();
				CacheManager::initCache($config,$type);
				break;
			case "self-update":
				self::selfUpdate();
				break;
			case "admin":
				$config=self::_init();
				self::adminInstall($config);
				break;
			default:
				self::info();
			break;
		}
	}

	private static function info(){
		echo self::$appName." (".self::$version.")\n";
		$commands=Command::getCommands();
		foreach ($commands as $command){
			echo $command->longString();
			echo "\n";
		}
	}
	private static function _init(){
		self::$activeDir=dirname(__FILE__);
		if(!self::setDir(getcwd())){
			echo "Failed to locate project root folder\n";
			echo "An Ubiquity project must contain the ".self::$checkProjectDir." folder.\n";
			die();
		}
		define('ROOT', realpath('./app').DS);
		$config=require_once 'app/config/config.php';
		require_once ROOT.self::$frameworkDir.'/controllers/Autoloader.php';
		require_once ROOT.'./../vendor/autoload.php';
		Autoloader::register($config);
		micro\controllers\Startup::setConfig($config);
		return $config;
	}

	private static function isBooleanTrue($s) {
		return $s === true || $s === "true" || $s === 1 || $s === "1";
	}

	public static function error(){
		/*$last_error = error_get_last();
		if ($last_error['type'] === E_ERROR) {
			Startup::errorHandler(E_ERROR, $last_error['message'], $last_error['file'], $last_error['line']);
		}*/
	}
}
error_reporting(E_ALL);

define('DS', DIRECTORY_SEPARATOR);

Micro::init(@$argv[1]);