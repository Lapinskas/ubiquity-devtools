#!/usr/bin/env php
<?php
use Ubiquity\cache\CacheManager;
use Ubiquity\utils\base\UString;
include 'tools/Console.php';
include 'tools/Command.php';
include 'tools/utils/FileUtils.php';

class Ubiquity {
	private static $version="1.1.2";
	private static $appName="Ubiquity devtools";
	private static $configOptions;
	private static $toolsConfig;
	private static $indexContent="\n\t\$this->loadView(\"@framework/index/index.html\");\n";
	private static $activeDir;
	private static $checkProjectDir=".ubiquity";

	public static function createComposerFile(){
		$composer=json_encode(self::$toolsConfig["composer"]);
		echo ConsoleFormatter::showInfo("Composer file creation...\n");
		FileUtils::writeFile("composer.json", $composer);
	}

	public static function replaceAll($array,$subject){
		array_walk($array, function(&$item){if(is_array($item)) $item=implode("\n", $item);});
		return str_replace(array_keys($array), array_values($array), $subject);
	}

	public static function openReplaceWrite($source,$destination,$keyAndValues){
		$str=FileUtils::openFile($source);
		$str=self::replaceAll($keyAndValues,$str);
		return FileUtils::writeFile($destination,$str);
	}

	private static function getOption($options,$option,$longOption,$default=NULL){
		if(array_key_exists($option, $options)){
			$option=$options[$option];
		}else if(array_key_exists($longOption, $options)){
			$option=$options[$longOption];
		}
		else if(isset($default)===true){
			$option=$default;
		}else
			$option="";
		return $option;
	}

	public static function create($projectName,$options,$force=false){
		self::$activeDir=dirname(__FILE__);
		self::$toolsConfig=include("tools/toolsConfig.php");
		$arguments=[
				["b","dbName",""],
				["t","dbType","mysql"],
				["s","serverName","127.0.0.1"],
				["p","port","3306"],
				["u","user","root"],
				["w","password",""],
				["m","all-models",false],
				["q","phpmv",false],
				["a","admin",false],
		];
		if(($dir=basename(getcwd()))==$projectName || $projectName==null){
			$answer=Console::question("Do you want to create the new project in this folder ($dir) ?",["y","n"]);
			if(Console::isYes($answer)){
				if(chdir("..")){
					self::create($projectName,$options,true);
					return;
				}else{
					ConsoleFormatter::showMessage( "Unable to return to parent folder!\n",'error');
					return;
				}
			}
		}
		if(!is_dir($projectName) || $force){
			if(!$force)
				FileUtils::safeMkdir($projectName);
			chdir($projectName);
			FileUtils::safeMkdir(self::$checkProjectDir);
			FileUtils::safeMkdir("app");
			FileUtils::safeMkdir("app/views/main");
			FileUtils::safeMkdir("app/controllers");
			FileUtils::safeMkdir("app/models");
			FileUtils::safeMkdir("app/config");
			define('ROOT', realpath('./app').DS);
			echo ConsoleFormatter::showInfo("Files copy...");
			FileUtils::xcopy(self::$activeDir."/project-files/app/controllers/ControllerBase.php", "app/controllers/ControllerBase.php");


			echo ConsoleFormatter::showInfo("Config files creation...\n");
			self::openReplaceWrite(self::$activeDir."/project-files/.htaccess", getcwd()."/.htaccess", array("%rewriteBase%"=>$projectName));
			self::$configOptions=["%siteUrl%"=>"http://127.0.0.1/".$projectName."/"];
			self::$configOptions["%projectName%"]=$projectName;
			self::$configOptions["%injections%"]="";
			self::$configOptions["%cssFiles%"]=[];
			self::$configOptions["%jsFiles%"]=[];
			foreach ($arguments as $argument){
				self::$configOptions["%".$argument[1]."%"]=self::getOption($options,$argument[0], $argument[1],$argument[2]);
			}
			self::showConfigOptions();

			self::includePhpmv();

			if(self::isBooleanTrue(self::$configOptions["%admin%"])){
				self::adminInstall();
			}

			self::openReplaceWrite(self::$activeDir."/project-files/templates/config.tpl", "app/config/config.php", self::$configOptions);
			FileUtils::xcopy(self::$activeDir."/project-files/templates/services.tpl", "app/config/services.php");
			FileUtils::xcopy(self::$activeDir."/project-files/index.php", "index.php");
			self::openReplaceWrite(self::$activeDir."/project-files/templates/vHeader.tpl", "app/views/main/vHeader.html", self::$configOptions);
			self::openReplaceWrite(self::$activeDir."/project-files/templates/vFooter.tpl", "app/views/main/vFooter.html", self::$configOptions);

			self::createComposerFile();
			$answer=Console::question("Do you want to run composer install ?",["y","n"]);
			if(Console::isYes($answer)){
				system("composer install");
				require_once ROOT.'./../vendor/autoload.php';
			}
			$config=require_once 'app/config/config.php';
			\Ubiquity\controllers\Startup::setConfig($config);

			self::createController($config,"IndexController",self::$indexContent);

			if(self::isBooleanTrue(self::$configOptions["%all-models%"])){
				ob_start();
				(new \Ubiquity\orm\creator\database\DbModelsCreator())->create($config);
				$res=ob_get_clean();
				echo ConsoleFormatter::showMessage($res,'success','models generation');
			}
			ob_start();
			\Ubiquity\cache\CacheManager::checkCache($config);
			$res=ob_get_clean();
			echo ConsoleFormatter::showMessage($res,'info','cache initialization');
			echo ConsoleFormatter::showMessage("project <b>{$projectName}</b> successfully created.",'success','new-project');
		}else{
			echo ConsoleFormatter::showInfo("The <b>{$projectName}</b> folder already exists !\n");
			$answer=Console::question("Would you like to continue ?",["y","n"]);
			if(Console::isYes($answer)){
				self::create($projectName,$options,true);
			}else
				die();
		}
	}

	private static function adminInstall($config=null){
		if(self::hasSemantic($config)){
			FileUtils::xcopy(self::$activeDir."/project-files/app/controllers/Admin.php","app/controllers/Admin.php");
			echo ConsoleFormatter::showInfo("Creating the Controller <b>Admin</b> at the location <b>app/controllers/Admin.php<:b>\n");
			self::$toolsConfig["composer"]["require-dev"]["czproject/git-php"]="^3.13";
		}else{
			echo ConsoleFormatter::showMessage("UbiquityMyAdmin require phpmv=semantic option.",'error');
			$answer=Console::question("Would you like to add Semantic-UI ?",["y","n"]);
			if(Console::isYes($answer)){
				self::$configOptions["%phpmv%"]="semantic";
				self::includePhpmv();
				self::adminInstall($config);
			}else{
				exit(1);
			}
		}
	}

	private static function hasSemantic($config=null){
		if(!isset($config))
			return @self::$configOptions["%phpmv%"]==="semantic";
		else{
			if(isset($config["di"])){
				$di=$config["di"];
				if(isset($di["jquery"])){
					$jquery=$di["jquery"];
					if($jquery instanceof \Ajax\php\ubiquity\JsUtils){
						return $jquery->semantic()!==null;
					}else
						return false;
				}else
					return false;
			}else
				return false;
		}
	}

	private static function includePhpmv(){
		if(self::$configOptions["%phpmv%"]!==false){
			$phpmv=self::$configOptions["%phpmv%"];
			switch ($phpmv){
				case "bootstrap":case "semantic":
					self::$configOptions["%injections%"]="\"jquery\"=>function(\$controller){
					\t\t\$jquery=new \\Ajax\\php\\ubiquity\\JsUtils([\"defer\"=>true],\$controller);
					\t\t\$jquery->{$phpmv}(new \\Ajax\\".ucfirst($phpmv)."());
					\t\treturn \$jquery;
					\t}";
					break;
				default:
					throw new Exception($phpmv." is not a valid option for phpMv-UI.");
					break;
			}
			self::$toolsConfig["composer"]["require"]["phpmv/php-mv-ui"]="dev-master";
			if($phpmv==="bootstrap"){
				self::$configOptions["%cssFiles%"][]=self::includeCss(self::$toolsConfig["cdn"]["bootstrap"]["css"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["jquery"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["bootstrap"]["js"]);
				self::$indexContent=FileUtils::openFile(self::$activeDir."/project-files/templates/postInstall/bootstrap.tpl");
			}
			elseif($phpmv==="semantic"){
				self::$configOptions["%cssFiles%"][]=self::includeCss(self::$toolsConfig["cdn"]["semantic"]["css"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["jquery"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["semantic"]["js"]);
				self::$configOptions["%jsFiles%"][]=self::includeJs(self::$toolsConfig["cdn"]["semantic"]["state"]);//Semantic-ui bug see
				self::$indexContent=FileUtils::openFile(self::$activeDir."/project-files/templates/postInstall/semantic.tpl");
			}
		}
	}

	private static function includeCss($filename){
		return "<link rel=\"stylesheet\" type=\"text/css\" href=\"{$filename}\">";
	}

	private static function includeJs($filename){
		return "<script src=\"{$filename}\"></script>";
	}

	private static function showConfigOptions(){
		$output = implode("\n", array_map(
		function ($v, $k) {if(is_array($v))
			$v=implode(",",$v );
			return sprintf("%s='%s'", str_ireplace("%", "", $k), $v); },
		self::$configOptions,
		array_keys(self::$configOptions)
		));
		echo ConsoleFormatter::showMessage($output."\n",'info','Command line arguments');
		$phpmv=self::$configOptions["%phpmv%"];
		if($phpmv!==false){
			if($phpmv!=="bootstrap" && $phpmv!=="semantic"){
				echo ConsoleFormatter::showMessage("<b>".$phpmv."</b> is not a valid option for phpMv-UI.\n",'error');
				exit(1);
			}
		}
	}

	public static function createController($config,$controllerName,$indexContent=null,$view=false,$force=false){
		$controllerName=ucfirst($controllerName);
		FileUtils::safeMkdir("app/controllers");
		$filename="app/controllers/{$controllerName}.php";
		if(file_exists($filename) && !$force){
			$answer=Console::question("The file {$filename} exists.\nWould you like to replace it?",["y","n"]);
			if(Console::isYes($answer))
				self::createController($config,$controllerName,$indexContent,$view,true);
		}else{
			$msg= "Creation of the Controller {$controllerName} at the location {$filename}\n";
			$namespace="";
			if(isset($config["mvcNS"]["controllers"]) && $config["mvcNS"]["controllers"]!=="")
				$namespace="namespace ".$config["mvcNS"]["controllers"].";";
			self::openReplaceWrite(self::$activeDir."/project-files/templates/controller.tpl", $filename, ["%controllerName%"=>$controllerName,"%indexContent%"=>$indexContent,"%namespace%"=>$namespace]);
			if($view){
				$viewFolder="app/views/".$controllerName;
				FileUtils::safeMkdir($viewFolder);
				$msg.= "Creation of the the associated view index.html at the location {$viewFolder}/index.html\n";
				self::openReplaceWrite(self::$activeDir."/project-files/templates/view.tpl", $viewFolder."/index.html", ["%controllerName%"=>$controllerName]);
			}
			ConsoleFormatter::showMessage($msg, "success","Controller creation");
		}
	}

	private static function setDir($dir=null){
		if(file_exists($dir) && is_dir($dir)){
			$microDir=$dir.DIRECTORY_SEPARATOR.self::$checkProjectDir;
			if(file_exists($microDir) && is_dir($microDir)){
				chdir($dir);
				echo ConsoleFormatter::showInfo("The project folder is <b>".FileUtils::cleanPathname($dir)."</b>\n");
				return true;
			}
		}
		$newDir=dirname($dir);
		if($newDir===$dir)
			return false;
		else
			return self::setDir($newDir);
	}

	private static function parseArguments(){
		global $argv;
		array_shift($argv);
		$out = array();
		foreach($argv as $arg){
			if(substr($arg, 0, 2) == '--'){
				preg_match ("/\=|\:|\ /", $arg, $matches, PREG_OFFSET_CAPTURE);
				$eqPos=$matches[0][1];
				if($eqPos === false){
					$key = substr($arg, 2);
					$out[$key] = isset($out[$key]) ? $out[$key] : true;
				}
				else{
					$key = substr($arg, 2, $eqPos - 2);
					$out[$key] = substr($arg, $eqPos + 1);
				}
			}
			else if(substr($arg, 0, 1) == '-'){
				if(substr($arg, 2, 1) == '='||substr($arg, 2, 1) == ':' || substr($arg, 2, 1) == ' '){
					$key = substr($arg, 1, 1);
					$out[$key] = substr($arg, 3);
				}
				else{
					$chars = str_split(substr($arg, 1));
					foreach($chars as $char){
						$key = $char;
						$out[$key] = isset($out[$key]) ? $out[$key] : true;
					}
				}
			}
			else{
				$out[] = $arg;
			}
		}
		return $out;
	}

	private static function selfUpdate(){
		$config=self::_init();
		define('ROOT', realpath('./app').DS);
		echo ConsoleFormatter::showInfo("Files copy...\n");

		$filename="app/controllers/Admin.php";
		if(file_exists($filename) && self::hasSemantic($config)){
			FileUtils::xcopy(self::$activeDir."/project-files/app/views/Admin","app/views/Admin");
			FileUtils::xcopy(self::$activeDir."/project-files/app/views/Seo","app/views/Seo");
		}
		$answer=Console::question("Do you want to run composer update ?",["y","n"]);
		if(Console::isYes($answer)){
			system("composer global update");
			system("composer update");
		}
		echo ConsoleFormatter::showMessage("project in <b>".self::$activeDir."</b> successfully updated.",'success','self-update');
	}

	public static function init($command,$current=2){
		global $argv;
		register_shutdown_function(array("Ubiquity","error"));
		$what=@$argv[$current];
		$options=self::parseArguments();
		switch ($command) {
			case "project":case "create-project":case "new":
			self::create($what,$options);
			break;
			case "all-models":case "create-all-models":
				$config=self::_init();
				(new \Ubiquity\orm\creator\database\DbModelsCreator())->create($config);
				break;
			case "model":case "create-model":
				$config=self::_init();
				(new \Ubiquity\orm\creator\database\DbModelsCreator())->create($config,true,$what);
				break;
			case "controller":case "create-controller":
				$config=self::_init();
				$view=self::getOption($options, "v", "views",false);
				$indexContent=null;
				if($view){
					$indexContent="\n\t\t".'$this->loadDefaultView();'."\n\t";
				}
				self::createController($config,$what,$indexContent,$view);
				break;
			case "crud":case "crud-controller":
				$config=self::_init();
				$resource=self::getOption($options, 'r', 'resource',null);
				$resource=self::getCompleteClassname($config, $resource);
				$scaffold=new \ConsoleScaffoldController(self::$activeDir);
				if(class_exists($resource)){
					$crudDatas=self::getOption($options, 'd', 'datas',true);
					$crudViewer=self::getOption($options, 'v', 'viewer',true);
					$crudEvents=self::getOption($options, 'e', 'events',true);
					$crudViews=self::getOption($options, 't', 'templates','index,form,display');
					$routePath=self::getOption($options, 'p', 'path','');
					$scaffold->addCrudController($what, $resource,$crudDatas,$crudViewer,$crudEvents,$crudViews,$routePath);
				}else{
					echo ConsoleFormatter::showMessage("The models class <b>{$resource}</b> does not exists!",'error','crud-controller');
				}
				break;
			case "auth": case "auth-controller":
				self::_init();
				$scaffold=new \ConsoleScaffoldController(self::$activeDir);
				$baseClass=self::getOption($options, 'e', 'extends',"\\Ubiquity\\controllers\\auth\\AuthController");
				$authView=self::getOption($options, 't', 'templates','index,info,noAccess,disconnected,message,baseTemplate');
				$routePath=self::getOption($options, 'p', 'path','');
				$scaffold->addAuthController($what, $baseClass,$authView,$routePath);
				break;
			case "clear-cache":
				$type=self::getOption($options, "t", "type","all");
				$config=self::_init();
				CacheManager::clearCache($config,$type);
				break;
			case "action": case "new-action":
				$config=self::_init();
				$scaffold=new \ConsoleScaffoldController(self::$activeDir);
				@list($controller,$action)=explode('.', $what);
				if($controller!=null && $action!=null){
					$controller=self::getCompleteClassname($config, $controller,'controllers');
					if(class_exists($controller)){
						$parameters=self::getOption($options, 'p', 'params');
						$routePath=self::getOption($options, 'r', 'route');
						$createView=self::getOption($options, 'v', 'create-view',false);
						$routeInfo=null;
						if($routePath!=null){
							$routeInfo=["path"=>$routePath,"methods"=>null];
						}
						$scaffold->_newAction($controller, $action,$parameters,'',$routeInfo,$createView);
					}
					else{
						echo ConsoleFormatter::showMessage("The controller class <b>{$controller}</b> does not exists!",'error','new-action');
					}
				}else{
					echo ConsoleFormatter::showMessage("You must use <b>controller.action</b> notation!",'error','new-action');
				}
				break;
			case "init-cache":
				$type=self::getOption($options, "t", "type","all");
				$config=self::_init();
				ob_start();
				CacheManager::initCache($config,$type);
				$res=ob_get_clean();
				echo ConsoleFormatter::showMessage($res,'success','init-cache:'.$type);
				break;
			case "self-update":
				self::selfUpdate();
				break;
			case "admin":
				$config=self::_init();
				self::adminInstall($config);
				break;
			case "help":
				if(isset($what)){
					self::infoCmd($what);
				}else{
					self::info();
				}
				break;
			default:
				$commands=Command::getInfo($command);
				echo ConsoleFormatter::showMessage("The command {$command} does not exists!",'warning');
				if(sizeof($commands)>0){
					$cmd=current($commands)["cmd"];
					$answer=Console::question("Did you mean {$cmd->getName()}?",["y","n"]);
					if(Console::isYes($answer)){
						self::init($cmd->getName(),1);
					}else{
						exit(1);
					}
				}
			break;
		}
	}

	private static function getCompleteClassname($config,$classname,$type='models'){
		$prefix=$config["mvcNS"][$type]??null;
		$classname=ltrim($classname,"\\");
		if(isset($prefix)){
			if(!UString::startswith($classname,$prefix)){
				$classname=$prefix."\\".$classname;
			}
		}
		return $classname;
	}

	private static function info(){
		echo self::$appName." (".self::$version.")\n";
		$commands=Command::getCommands();
		foreach ($commands as $command){
			echo ConsoleFormatter::formatHtml($command->longString());
			echo "\n";
		}
	}

	private static function infoCmd($cmd){
		$infos=Command::getInfo($cmd);
		$command=null;
		foreach ($infos as $info){
			echo ConsoleFormatter::showInfo($info['info']);
			if($command!==$info['cmd']){
				echo ConsoleFormatter::formatHtml($info['cmd']->longString());
			}
			$command=$info['cmd'];
			echo "\n";
		}
	}
	private static function _init(){
		self::$activeDir=dirname(__FILE__);
		if(!self::setDir(getcwd())){
			echo ConsoleFormatter::showMessage("Failed to locate project root folder\nAn Ubiquity project must contain the <b>".self::$checkProjectDir."</b> folder.",'error');
			die();
		}
		define('ROOT', realpath('./app').DS);
		$config=require_once 'app/config/config.php';
		require_once ROOT.'./../vendor/autoload.php';
		\Ubiquity\controllers\Startup::setConfig($config);
		include 'tools/ConsoleScaffoldController.php';
		return $config;
	}

	private static function isBooleanTrue($s) {
		return $s === true || $s === "true" || $s === 1 || $s === "1";
	}

	public static function error(){
		/*$last_error = error_get_last();
		if ($last_error['type'] === E_ERROR) {
			Startup::errorHandler(E_ERROR, $last_error['message'], $last_error['file'], $last_error['line']);
		}*/
	}
}
error_reporting(E_ALL);

define('DS', DIRECTORY_SEPARATOR);

Ubiquity::init(@$argv[1]);